/* * @(#)LoginManagerImpl.java	 2012-9-18 * * Copyright 2004-2012 Liuzhongnan.  * All rights reserved. *  * LiuZhongnan 81595157@126.com PROPRIETARY/CONFIDENTIAL. */package com.example.cookietest;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.util.List;import org.apache.http.HttpResponse;import org.apache.http.HttpStatus;import org.apache.http.client.methods.HttpPost;import org.apache.http.cookie.Cookie;import org.apache.http.impl.client.DefaultHttpClient;import android.os.AsyncTask;import android.text.TextUtils;import android.util.Log;import com.alibaba.fastjson.JSON;public class LoginManager  {	public interface ICallBack {		/** 登录成功回调接口 */		public void onSuccess();		/** 登录失败回调接口 */		public void onFailed(String error);	} 		public void login(final String username, final String password, final ICallBack call) {		new AsyncTask<Void, Void, Integer>() {			@Override			protected Integer doInBackground(Void... params) {				String password_temp = password;				try {					DefaultHttpClient httpClient = new DefaultHttpClient();					HttpPost httpPost = new HttpPost(URLContainer.getLoginUrl(							username, password_temp));					HttpResponse httpResponse = httpClient.execute(httpPost);										InputStream is = httpResponse.getEntity().getContent();					String jsonString = Util.convertStreamToString(is);										LoginResult loginResult = JSON.parseObject(jsonString, LoginResult.class);										String status = loginResult.status;					int code = loginResult.code;					if (!status.equals("success") && code != 1) {						return code;					}										if (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {						//获得cookie						getCookie(httpClient);						return R.string.user_login_success;					} else if (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_GATEWAY_TIMEOUT) {						return R.string.user_login_error;					} else {						return R.string.user_login_error_unknown;					}				} catch (Exception e) {					Log.e("LoginNRegisterActivity.login()", e.getMessage() + "");					return R.string.network_error;				}			}			@Override			protected void onPostExecute(Integer result) {				switch (result) {				case 0:					if (call != null)						call.onFailed("登录失败");				case R.string.user_login_success:					if (call != null)						call.onSuccess();					break;				case R.string.user_login_error: //弱网					if (call != null)						call.onFailed(App.mContext.getResources().getString(										R.string.user_login_error));					break;				case  R.string.network_error:					if (call != null)						call.onFailed(App.mContext.getResources().getString(										R.string.network_error));					break;				default:					if (call != null)						call.onFailed(App.mContext.getResources().getString(										R.string.user_login_error_unknown));					break;				}				super.onPostExecute(result);			}		}.execute();	}		/**	 * 获取标准 Cookie ，并存储 	 * @param httpClient	 */	private void getCookie(DefaultHttpClient httpClient) {		 List<Cookie> cookies = httpClient.getCookieStore().getCookies();		 StringBuffer sb = new StringBuffer();		for (int i = 0; i < cookies.size(); i++) {			 Cookie cookie = cookies.get(i);			 String cookieName = cookie.getName();			 String cookieValue = cookie.getValue();			if (!TextUtils.isEmpty(cookieName)					&& !TextUtils.isEmpty(cookieValue)) {				sb.append(cookieName + "=");				sb.append(cookieValue + ";");			}		}		Log.e("cookie", sb.toString());		Util.savePreference("cookie", sb.toString());	}	}